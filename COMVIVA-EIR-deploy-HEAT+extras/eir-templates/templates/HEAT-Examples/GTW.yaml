heat_template_version: 2016-10-14

description: RDBMS VNFC DEPLOY TEMPLATE

parameters:

  ###################################################
  ## General Parameters
  ###################################################
  vnfi_id:
    type: string
    description: VNFI name
    label: VNFI_Name
    constraints:
    - length: { min: 1, max: 16 }
    - allowed_pattern: "[A-Za-z][A-Za-z_0-9-]*"
  keypair:
    type: string
    label: KeyPair
    description: SSH keypayr to inject in all servers
  security_group_id:
    type: string
    label: SecurityGroupID
    description: Security group UUID
  site_code:
    type: string
    label: Site Code
    description: Short site name. For exampl SP, RJ, AMBA.
    default: AR
  time_zone_code:
    type: string
    label: Time Zone Code
    description: Timezone code. In CentOS7, 'cd /usr/share/zoneinfo; find . -type f'
    default: none
  timesync:
    type: string
    label: NTP Server List
    description: NTP server list.
  cca_config:
    type: string
    label: CCA Configuration
    description: CCA configuration
  do_signaling_routes:
    type: string
    default: "false"
    description: false or true if signaling ip routes need to be done.
  external_endpoints:
    type: string
    label: External Endpoints
    description: String con el contenido JSON de extenal endpoints
  develop:
    type: boolean
    default: false
    description: Only for testing purpose.
  trap_dest_addrs:
    type: string
    label: Trap Destination Address List
    description: IP where the management system should send traps.
  vnfcnames:
    type: json
    label: Vnfc Names
    description: Vnfc names renaming
  networks:
    type: json
    label: Local Networks
    description: This POP networks information
  inter_site_nets:
    type: string
    label: VNF Networks Attributes
    description: name, site, cidr and gateway of every inter-site network
  flavors:
    type: json
    label: VNF Flavors
    description: JSON defining flavors names and parameters.
  cca_ignite_multicast_group:
    type: string
    label: CCA Multicast Address
    default: 228.10.10.160
    description: UDP multicast address to be used by CCA ignite cluster
  mgms_ignite_multicast_group:
    type: string
    label: MGMS Multicast Address
    default: 231.1.1.7
    description: UDP multicast address to be used by MGMS ignite cluster
  cdr_ignite_multicast_group:
    type: string
    label: CDR Multicast Address
    default: 231.0.1.241
    description: UDP multicast address to be used by CDR ignite cluster
  unica:
    type: boolean
    description: Set to True if deploying in UNICA environment
    default: false
  
  ###################################################
  ## GTW Parameters
  ###################################################
  gtw_image:
    type: string
    label: GTW Image
    description: Image name or UUID.
#  gtw_server_group_id:
#    type: string
#    label: GTW Server Group UUID
#    description: GTW Server Group UUID (affinity)
  gtw_count:
    type: number
    label: GTW Count
    description: How many GTW instances to create.
    constraints:
      - range: { min: 0 }
  gtw_nodes:
    type: json
    label: GTW VM Attribute List
    description: Array of nodes parameters, one for each index in HEAT ResourceGroup.

resources:

  ###################################################
  ## Workaround and other heat values
  ###################################################
  develop_flag:
    type: OS::Heat::Value
    properties:
      type: boolean
      value:
        yaql:
          expression: bool($.data.value)
          data:
            value: { get_param: develop }

  cca_local_quorum:
    type: OS::Heat::Value
    properties:
      type: number
      value:
        yaql:
          expression: ( ( int($.data.value0) + int($.data.value1) ) / 2 ) + 1
          data:
            value0: 2
            value1: 2

  ###################################################
  ## Call to GTW HEAT Template
  ###################################################

  gtw_group:
    type: OS::Heat::ResourceGroup
    properties:
      count:  { get_param: gtw_count }
      resource_def:
        type: ../VNFC-Files/GTW-VNFC.yaml
        properties:
          vnfi_id: { get_param: vnfi_id }
          index: '%index%'
          security_group: { get_param: security_group_id }
          keypair: { get_param: keypair }
          site_code: { get_param: site_code }
          time_zone_code: { get_param: time_zone_code }
          timesync: { get_param: timesync }
          cca_config: { get_param: cca_config }
          image: { get_param: gtw_image }
          flavor: { get_param: [ flavors, GTW, name ] }
          om_net: { get_param: [ networks, OM, netname ] }
          om_subnet: { get_param: [ networks, OM, subnetname ] }
          om_mode: { get_param: [ networks, OM, mode ] }
          om_netaddr: { get_param: [ networks, OM, netaddr ] }
          om_prefix: { get_param: [ networks, OM, prefix ] }
          om_gateway: { get_param: [ networks, OM, gateway ] }
          sig_net: { get_param: [ networks, SIG, netname ] }
          sig_subnet: { get_param: [ networks, SIG, subnetname ] }
          sig_mode: { get_param: [ networks, SIG, mode ] }
          sig_netaddr: { get_param: [ networks, SIG, netaddr ] }
          sig_prefix: { get_param: [ networks, SIG, prefix ] }
          sig_gateway: { get_param: [ networks, SIG, gateway ] }
          sig2_net: { get_param: [ networks, SIG, netname ] }
          sig2_subnet: { get_param: [ networks, SIG, subnetname ] }
          sig2_mode: { get_param: [ networks, SIG, mode ] }
          sig2_netaddr: { get_param: [ networks, SIG, netaddr ] }
          sig2_prefix: { get_param: [ networks, SIG, prefix ] }
          sig2_gateway: { get_param: [ networks, SIG, gateway ] }
          ssh_net: { get_param: [ networks, SSH, netname ] }
          ssh_subnet: { get_param: [ networks, SSH, subnetname ] }
          ssh_mode: { get_param: [ networks, SSH, mode ] }
          ssh_netaddr: { get_param: [ networks, SSH, netaddr ] }
          ssh_prefix: { get_param: [ networks, SSH, prefix ] }
          ssh_gateway: { get_param: [ networks, SSH, gateway ] }
#          server_group: { get_param: gtw_server_group_id }
          develop: { get_attr: [ develop_flag, value ] }
          inter_site_nets: { get_param: inter_site_nets }
          do_signaling_routes: { get_param: do_signaling_routes }
          local_quorum: { get_attr:  [ cca_local_quorum, value ] }
          cca_ignite_multicast_group: { get_param: cca_ignite_multicast_group }
          mgms_ignite_multicast_group: { get_param: mgms_ignite_multicast_group }
          cdr_ignite_multicast_group: { get_param: cdr_ignite_multicast_group }
          nodes: { get_param: gtw_nodes }
          networks: { get_param: networks }
          unica: { get_param: unica }
          vnfcnames: {get_param: vnfcnames}